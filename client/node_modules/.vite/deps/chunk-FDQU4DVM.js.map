{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/account-factory-f15458e0.browser.esm.js", "../../@thirdweb-dev/sdk/dist/deployWithThrowawayDeployer-1d350b63.browser.esm.js"],
  "sourcesContent": ["import { bj as AbiSchema, a1 as extractCommentFromMetadata, J as fetchContractMetadataFromAddress, ap as fetchSourceFilesFromMetadata, a3 as extractFunctionsFromAbi, cw as AmountSchema, b9 as AddressOrEnsSchema, dl as FEATURE_ACCOUNT_PERMISSIONS, cu as AddressZero, aM as resolveAddress, dm as FEATURE_ACCOUNT, dn as FEATURE_ACCOUNT_FACTORY, aw as isContractDeployed } from './index-1f21bb77.browser.esm.js';\nimport { T as Transaction, c as buildTransactionFunction } from './transactions-e1717c1c.browser.esm.js';\nimport { BigNumber, utils } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { d as detectContractFeature, a as ContractEvents } from './contract-appuri-ac486979.browser.esm.js';\nimport { I as resolveOrGenerateId } from './signature-94e81470.browser.esm.js';\nimport { z } from 'zod';\nimport { S as StartDateSchema, E as EndDateSchema, a as assertEnabled } from './assertEnabled-33c64682.browser.esm.js';\n\n/**\n * @internal\n * @param abi\n * @param metadata\n */\nfunction extractEventsFromAbi(abi, metadata) {\n  const parsedAbi = AbiSchema.parse(abi || []);\n  const events = parsedAbi.filter(el => el.type === \"event\");\n  const parsed = [];\n  for (const e of events) {\n    const doc = extractCommentFromMetadata(e.name, metadata, \"events\");\n    parsed.push({\n      inputs: e.inputs || [],\n      outputs: e.outputs || [],\n      name: e.name || \"unknown\",\n      comment: doc\n    });\n  }\n  return parsed;\n}\n\n/**\n * Handles publish metadata for a contract\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractPublishedMetadata {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get the published metadata for this contract\n   * @public\n   */\n  async get() {\n    if (this._cachedMetadata) {\n      return this._cachedMetadata;\n    }\n    this._cachedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n    return this._cachedMetadata;\n  }\n\n  /**\n   * @public\n   */\n  async extractSources() {\n    const publishedMetadata = await this.get();\n    return fetchSourceFilesFromMetadata(publishedMetadata, this.storage);\n  }\n\n  /**\n   * @public\n   */\n  async extractFunctions() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractFunctionsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n\n  /**\n   * @public\n   */\n  async extractEvents() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractEventsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n}\n\nlet AdminFlag = /*#__PURE__*/function (AdminFlag) {\n  AdminFlag[AdminFlag[\"None\"] = 0] = \"None\";\n  AdminFlag[AdminFlag[\"AddAdmin\"] = 1] = \"AddAdmin\";\n  AdminFlag[AdminFlag[\"RemoveAdmin\"] = 2] = \"RemoveAdmin\";\n  return AdminFlag;\n}({});\nconst DEFAULT_PERMISSIONS = {\n  // eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\n  startDate: BigNumber.from(0),\n  // eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\n  expirationDate: BigNumber.from(0),\n  approvedCallTargets: [],\n  nativeTokenLimitPerTransaction: \"0\"\n};\nconst SignerPermissionsSchema = /* @__PURE__ */(() => z.object({\n  startDate: StartDateSchema,\n  expirationDate: EndDateSchema,\n  nativeTokenLimitPerTransaction: AmountSchema.default(0),\n  approvedCallTargets: z.union([z.array(AddressOrEnsSchema), z.literal(\"*\")])\n}))();\nconst PermissionSnapshotSchema = /* @__PURE__ */(() => z.array(z.object({\n  signer: AddressOrEnsSchema,\n  makeAdmin: z.boolean(),\n  permissions: SignerPermissionsSchema\n})))();\nconst SignerPermissionRequestV1 = [{\n  name: \"signer\",\n  type: \"address\"\n}, {\n  name: \"approvedTargets\",\n  type: \"address[]\"\n}, {\n  name: \"nativeTokenLimitPerTransaction\",\n  type: \"uint256\"\n}, {\n  name: \"permissionStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"permissionEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst SignerPermissionRequest = [{\n  name: \"signer\",\n  type: \"address\"\n}, {\n  name: \"isAdmin\",\n  type: \"uint8\"\n}, {\n  name: \"approvedTargets\",\n  type: \"address[]\"\n}, {\n  name: \"nativeTokenLimitPerTransaction\",\n  type: \"uint256\"\n}, {\n  name: \"permissionStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"permissionEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\n\nclass AccountPermissions {\n  featureName = FEATURE_ACCOUNT_PERMISSIONS.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * HELPER FUNCTIONS\n   ********************************/\n\n  hasDuplicateSigners(snapshot) {\n    const checkedSigner = {};\n    const signers = snapshot.map(item => item.signer);\n    for (const signer of signers) {\n      if (!checkedSigner[signer]) {\n        checkedSigner[signer] = true;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Format the access restrictions for a given role\n   *\n   * @param restrictions - The access restrictions for a given role\n   * @returns formatted role restrictions\n   *\n   */\n  parseSignerPermissionsStruct(permissions) {\n    return {\n      startDate: new Date(parseInt(permissions.startTimestamp.toString()) * 1000),\n      expirationDate: new Date(parseInt(permissions.endTimestamp.toString()) * 1000),\n      nativeTokenLimitPerTransaction: BigNumber.from(permissions.nativeTokenLimitPerTransaction),\n      approvedCallTargets: permissions.approvedTargets\n    };\n  }\n  async sendSignerPermissionRequest(signerAddress, permissions, adminFlag) {\n    if (detectContractFeature(this.contractWrapper, \"AccountPermissionsV1\")) {\n      // legacy account permissions contract\n      // admin is set only via EOA\n      // signer permissions are set via EOA or admin but no wildcard\n      if (adminFlag === AdminFlag.AddAdmin || adminFlag === AdminFlag.RemoveAdmin) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"setAdmin\",\n          args: [signerAddress, adminFlag === AdminFlag.AddAdmin]\n        });\n      } else {\n        const {\n          payload,\n          signature\n        } = await this.generateLegacyPayload(signerAddress, permissions);\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"setPermissionsForSigner\",\n          args: [payload, signature]\n        });\n      }\n    }\n    const {\n      payload,\n      signature\n    } = await this.generatePayload(signerAddress, permissions, adminFlag);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPermissionsForSigner\",\n      args: [payload, signature]\n    });\n  }\n\n  /**\n   * Generate and sign a payload to grant or revoke a signer's access to the account.\n   *\n   * @param signer - The address of the signer\n   * @param roleAction - The address of the signer\n   * @returns The generated payload and signature produced on signing that payload.\n   *\n   */\n  async generatePayload(signerAddress, permissions, isAdmin) {\n    // Get payload struct.\n    const payload = {\n      signer: signerAddress,\n      isAdmin: isAdmin.valueOf(),\n      approvedTargets: permissions.approvedCallTargets === \"*\" ? [AddressZero] : permissions.approvedCallTargets,\n      nativeTokenLimitPerTransaction: utils.parseEther(permissions.nativeTokenLimitPerTransaction),\n      permissionStartTimestamp: permissions.startDate,\n      permissionEndTimestamp: permissions.expirationDate,\n      reqValidityStartTimestamp: 0,\n      // Req validity ends 10 years from now.\n      reqValidityEndTimestamp: BigNumber.from(Math.floor(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).getTime() / 1000)),\n      uid: resolveOrGenerateId(undefined)\n    };\n\n    // Generate signature\n    const chainId = await this.contractWrapper.getChainID();\n    const connectedSigner = this.contractWrapper.getSigner();\n    invariant(connectedSigner, \"No signer available\");\n    const signature = await this.contractWrapper.signTypedData(connectedSigner, {\n      name: \"Account\",\n      version: \"1\",\n      chainId,\n      verifyingContract: this.getAddress()\n    }, {\n      SignerPermissionRequest\n    }, payload);\n    return {\n      payload,\n      signature\n    };\n  }\n  async generateLegacyPayload(signerAddress, permissions) {\n    if (permissions.approvedCallTargets === \"*\") {\n      throw new Error(\"Wildcard call targets are not supported on legacy account permissions contract, please deploy an updated contract factory.\");\n    }\n    // legacy account permissions contract\n    // admin is set only via EOA\n    // signer permissions are set via EOA or admin but no wildcard\n    const payload = {\n      signer: signerAddress,\n      approvedTargets: permissions.approvedCallTargets,\n      nativeTokenLimitPerTransaction: utils.parseEther(permissions.nativeTokenLimitPerTransaction),\n      permissionStartTimestamp: permissions.startDate,\n      permissionEndTimestamp: permissions.expirationDate,\n      reqValidityStartTimestamp: 0,\n      // Req validity ends 10 years from now.\n      reqValidityEndTimestamp: BigNumber.from(Math.floor(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).getTime() / 1000)),\n      uid: resolveOrGenerateId(undefined)\n    };\n    const chainId = await this.contractWrapper.getChainID();\n    const connectedSigner = this.contractWrapper.getSigner();\n    invariant(connectedSigner, \"No signer available\");\n    const signature = await this.contractWrapper.signTypedData(connectedSigner, {\n      name: \"Account\",\n      version: \"1\",\n      chainId,\n      verifyingContract: this.getAddress()\n    }, {\n      SignerPermissionRequest: SignerPermissionRequestV1\n    }, payload);\n    return {\n      payload,\n      signature\n    };\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isAdmin\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isActiveSigner\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns all admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return await this.contractWrapper.read(\"getAllAdmins\", []);\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns all (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    const activeSignersWithPerms = await this.contractWrapper.read(\"getAllActiveSigners\", []);\n    return await Promise.all(activeSignersWithPerms.map(async signerWithPermissions => {\n      const signer = signerWithPermissions.signer;\n      const permissions = this.parseSignerPermissionsStruct(signerWithPermissions);\n      return {\n        signer,\n        permissions\n      };\n    }));\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns all admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    const allAdmins = await this.getAllAdmins();\n    const transformedAdmins = allAdmins.map(admin => {\n      return {\n        isAdmin: true,\n        signer: admin,\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      };\n    });\n    const allSigners = await this.getAllSigners();\n    return [...transformedAdmins, ...allSigners];\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   ********************************/\n\n  /**\n   * Grant an address admin access to the account.\n   *\n   * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n   *\n   * @param signer - The address to be granted admin access to the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, DEFAULT_PERMISSIONS, AdminFlag.AddAdmin);\n  });\n\n  /**\n   * Revoke an address' admin access to the account.\n   *\n   * @remarks Revokes an address' admin access to the account.\n   *\n   * @param signer - The address of an admin of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, DEFAULT_PERMISSIONS, AdminFlag.RemoveAdmin);\n  });\n\n  /**\n   * Grant a signer permissions to use the account.\n   *\n   * @remarks Grants a signer permissions to use the account.\n   *\n   * @param signer - The signer to be granted permissions to use the account.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantPermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantPermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot grant permissions to an existing admin.\");\n    }\n    if (await this.isSigner(resolvedSignerAddress)) {\n      throw new Error(\"Signer already has permissions. Cannot grant permissions to an existing signer. You can update permissions using `updatePermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions, AdminFlag.None);\n  });\n\n  /**\n   * Update the permissions of a signer for using the account.\n   *\n   * @remarks Updates the permissions of a signer for using the account.\n   *\n   * @param signer - The signer whose permissions to use the account are to be updated.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.updatePermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  updatePermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot update permissions of an existing admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions, AdminFlag.None);\n  });\n\n  /**\n   * Revoke a scoped access address to the account\n   *\n   * @remarks Revokes an address' access to the account.\n   *\n   * @param signer - The address whose access to the account is to be revoked.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAccess = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot revoke permissions of an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(0),\n      expirationDate: BigNumber.from(0),\n      approvedCallTargets: [],\n      nativeTokenLimitPerTransaction: \"0\"\n    }, AdminFlag.None);\n  });\n\n  /**\n   * Approve an address as a call target for a given signer on the account\n   *\n   * @remarks Approves an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to approve as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.approveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  approveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedTarget = await resolveAddress(target);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n    if (permissions.approvedTargets.includes(target)) {\n      throw new Error(\"Target is already approved\");\n    }\n    const newTargets = [...permissions.approvedTargets, resolvedTarget];\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(permissions.startTimestamp),\n      expirationDate: BigNumber.from(permissions.endTimestamp),\n      approvedCallTargets: newTargets,\n      nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n    }, AdminFlag.None);\n  });\n\n  /**\n   * Disapprove an address as a call target for a given signer on the account\n   *\n   * @remarks Disapprove an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to disapprove as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  disapproveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedTarget = await resolveAddress(target);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n    if (!permissions.approvedTargets.includes(resolvedTarget)) {\n      throw new Error(\"Target is currently not approved\");\n    }\n    const newTargets = permissions.approvedTargets.filter(approvedTarget => utils.getAddress(approvedTarget) !== utils.getAddress(resolvedTarget));\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(permissions.startTimestamp),\n      expirationDate: BigNumber.from(permissions.endTimestamp),\n      approvedCallTargets: newTargets,\n      nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n    }, AdminFlag.None);\n  });\n\n  /**\n   * Set the account's entire snapshot of permissions.\n   *\n   * @remarks Sets the account's entire snapshot of permissions.\n   *\n   * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.setAccess(permissionSnapshot);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  resetAllPermissions = /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n    const resolvedSnapshot = await PermissionSnapshotSchema.parseAsync(permissionSnapshot);\n\n    /**\n     * All cases\n     *\n     * - Add new admin :check:\n     * - Remove current admin :check:\n     * - Add new scoped :check:\n     * - Remove current scoped :check:\n     * - Update current scoped :check:\n     * - Current admin -> new scoped :check:\n     * - Current scoped -> new admin :check:\n     **/\n\n    // No duplicate signers in input!\n    if (this.hasDuplicateSigners(resolvedSnapshot)) {\n      throw new Error(\"Duplicate signers found in input.\");\n    }\n    const removeAdminData = [];\n    const addOrUpdateSignerData = [];\n    const removeSignerData = [];\n\n    // Remove all existing admins not included in the passed snapshot.\n    const allAdmins = await this.getAllAdmins();\n    const allToMakeAdmin = resolvedSnapshot.filter(item => item.makeAdmin).map(item => item.signer);\n    allAdmins.forEach(async admin => {\n      if (!allToMakeAdmin.includes(admin)) {\n        const data = (await this.sendSignerPermissionRequest(admin, DEFAULT_PERMISSIONS, AdminFlag.RemoveAdmin)).encode();\n        removeAdminData.push(data);\n      }\n    });\n\n    // Remove all existing signers not included in the passed snapshot.\n    const allSigners = await this.getAllSigners();\n    const allToMakeSigners = resolvedSnapshot.filter(item => {\n      return !item.makeAdmin;\n    }).map(item => item.signer);\n    await Promise.all(allSigners.map(async item => {\n      if (!allToMakeSigners.includes(item.signer)) {\n        const data = (await this.sendSignerPermissionRequest(item.signer, DEFAULT_PERMISSIONS, AdminFlag.None)).encode();\n        removeSignerData.push(data);\n      }\n    }));\n    for (const member of resolvedSnapshot) {\n      // Add new admin\n      if (member.makeAdmin) {\n        (await this.sendSignerPermissionRequest(member.signer, DEFAULT_PERMISSIONS, AdminFlag.AddAdmin)).encode();\n      } else {\n        // Add new scoped\n        const data = (await this.sendSignerPermissionRequest(member.signer, member.permissions, AdminFlag.None)).encode();\n        addOrUpdateSignerData.push(data);\n      }\n    }\n    const data = [];\n    removeAdminData.forEach(item => {\n      data.push(item);\n    });\n    removeSignerData.forEach(item => {\n      data.push(item);\n    });\n    addOrUpdateSignerData.forEach(item => {\n      data.push(item);\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data]\n    });\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass Account {\n  featureName = FEATURE_ACCOUNT.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n    this.accountPermissions = this.detectAccountPermissions();\n  }\n  detectAccountPermissions() {\n    if (detectContractFeature(this.contractWrapper, \"AccountPermissions\") || detectContractFeature(this.contractWrapper, \"AccountPermissionsV1\")) {\n      return new AccountPermissions(this.contractWrapper);\n    }\n    return undefined;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isAdmin(signerAddress);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isSigner(signerAddress);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns all admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdmins();\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns all (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllSigners();\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns all admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdminsAndSigners();\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   ********************************/\n\n  /**\n   * Grant an address admin access to the account.\n   *\n   * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n   *\n   * @param signer - The address to be granted admin access to the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantAdminPermissions.prepare(signerAddress);\n  });\n\n  /**\n   * Revoke an address' admin access to the account.\n   *\n   * @remarks Revokes an address' admin access to the account.\n   *\n   * @param signer - The address of an admin of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAdminPermissions.prepare(signerAddress);\n  });\n\n  /**\n   * Grant a signer permissions to use the account.\n   *\n   * @remarks Grants a signer permissions to use the account.\n   *\n   * @param signer - The signer to be granted permissions to use the account.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantPermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantPermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantPermissions.prepare(signerAddress, permissions);\n  });\n\n  /**\n   * Update the permissions of a signer for using the account.\n   *\n   * @remarks Updates the permissions of a signer for using the account.\n   *\n   * @param signer - The signer whose permissions to use the account are to be updated.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.updateAccess(signer, restrictions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  updatePermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).updatePermissions.prepare(signerAddress, permissions);\n  });\n\n  /**\n   * Revoke a scoped access address to the account\n   *\n   * @remarks Revokes an address' access to the account.\n   *\n   * @param signer - The address whose access to the account is to be revoked.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAccess = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAccess.prepare(signerAddress);\n  });\n\n  /**\n   * Approve an address as a call target for a given signer on the account\n   *\n   * @remarks Approves an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to approve as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.approveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  approveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).approveTargetForSigner.prepare(signerAddress, target);\n  });\n\n  /**\n   * Disapprove an address as a call target for a given signer on the account\n   *\n   * @remarks Disapprove an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to disapprove as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  disapproveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).disapproveTargetForSigner.prepare(signerAddress, target);\n  });\n\n  /**\n   * Set the account's entire snapshot of permissions.\n   *\n   * @remarks Sets the account's entire snapshot of permissions.\n   *\n   * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.setAccess(permissionSnapshot);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  resetAllPermissions = /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).resetAllPermissions.prepare(permissionSnapshot);\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass AccountFactory {\n  featureName = FEATURE_ACCOUNT_FACTORY.name;\n\n  // utilities\n\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the deterministic address of the account that will be created\n   *\n   * @example\n   * ```javascript\n   * const accountAddress = await contract.accountFactory.predictAccountAddress(admin);\n   * ```\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns the deterministic address of the account that will be created for the given admin.\n   *\n   * @twfeature AccountFactory\n   */\n  async predictAccountAddress(admin, extraData) {\n    let data = utils.toUtf8Bytes(\"\");\n    if (extraData) {\n      data = extraData;\n    }\n    return this.contractWrapper.read(\"getAddress\", [admin, data]);\n  }\n\n  /**\n   * Get all accounts on which the given signer has authority\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAssociatedAccounts(admin);\n   * ```\n   * @param signer - The account address.\n   * @returns all accounts on which the given signer has authority.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAssociatedAccounts(signer) {\n    return this.contractWrapper.read(\"getAccountsOfSigner\", [signer]);\n  }\n\n  /**\n   * Get all accounts\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   * ```\n   *\n   * @returns all accounts created via the account factory.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAllAccounts() {\n    return await this.contractWrapper.read(\"getAllAccounts\", []);\n  }\n\n  /**\n   * Check if a account has been deployed for the given admin\n   *\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns whether the account has been deployed for the given admin.\n   */\n  async isAccountDeployed(admin, extraData) {\n    const addr = await this.predictAccountAddress(admin, extraData);\n    return isContractDeployed(addr, this.contractWrapper.getProvider());\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a account\n   *\n   * @remarks Create a account for an admin. The admin will have complete authority over the account.\n   *\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   *\n   * @example\n   *  ```javascript\n   * const tx = await contract.accountFactory.createAccount(admin, extraData);\n   * const receipt = tx.receipt();\n   * const accountAddress = tx.address;\n   * ```\n   *\n   * @twfeature AccountFactory\n   */\n  createAccount = /* @__PURE__ */buildTransactionFunction(async (accountAdmin, extraData) => {\n    if (await this.isAccountDeployed(accountAdmin, extraData)) {\n      throw new Error(`Account already deployed for admin: ${accountAdmin}`);\n    }\n    let data = utils.toUtf8Bytes(\"\");\n    if (extraData) {\n      data = extraData;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createAccount\",\n      args: [accountAdmin, data],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"AccountCreated\", receipt?.logs);\n        return {\n          address: event[0].args.account,\n          receipt\n        };\n      }\n    });\n  });\n}\n\nexport { Account as A, ContractPublishedMetadata as C, DEFAULT_PERMISSIONS as D, PermissionSnapshotSchema as P, SignerPermissionsSchema as S, AccountFactory as a, AdminFlag as b, SignerPermissionRequestV1 as c, SignerPermissionRequest as d, extractEventsFromAbi as e };\n", "import { du as caches, ay as getCreate2FactoryAddress, aK as fetchAndCacheDeployMetadata, aJ as fetchPublishedContractFromPolygon, aF as computeDeploymentInfo, at as GAS_LIMIT_FOR_DEPLOYER, aw as isContractDeployed, av as DEPLOYER_ABI, au as DEPLOYER_BYTECODE } from './index-1f21bb77.browser.esm.js';\nimport { utils, BigNumber, ContractFactory } from 'ethers';\nimport invariant from 'tiny-invariant';\n\nfunction getFunctionSignature(fnInputs) {\n  return \"(\" + fnInputs.map(i => {\n    return i.type === \"tuple\" ? getFunctionSignature(i.components) : i.type === \"tuple[]\" ? getFunctionSignature(i.components) + `[]` : i.type;\n  }).join(\",\") + \")\";\n}\nfunction generatePluginFunctions(pluginAddress, pluginAbi) {\n  const pluginInterface = new utils.Interface(pluginAbi);\n  const pluginFunctions = [];\n  // TODO - filter out common functions like _msgSender(), contractType(), etc.\n  for (const fnFragment of Object.values(pluginInterface.functions)) {\n    const fn = pluginInterface.getFunction(pluginInterface.getSighash(fnFragment));\n    if (fn.name.includes(\"_\")) {\n      continue;\n    }\n    pluginFunctions.push({\n      functionSelector: pluginInterface.getSighash(fn),\n      functionSignature: fn.name + getFunctionSignature(fn.inputs),\n      pluginAddress: pluginAddress\n    });\n  }\n  return pluginFunctions;\n}\nfunction generateExtensionFunctions(extensionAbi) {\n  const extensionInterface = new utils.Interface(extensionAbi);\n  const extensionFunctions = [];\n  // TODO - filter out common functions like _msgSender(), contractType(), etc.\n\n  for (const fnFragment of Object.values(extensionInterface.functions)) {\n    const fn = extensionInterface.getFunction(extensionInterface.getSighash(fnFragment));\n    if (fn.name.startsWith(\"_\")) {\n      continue;\n    }\n    extensionFunctions.push({\n      functionSelector: extensionInterface.getSighash(fn),\n      functionSignature: fn.name + getFunctionSignature(fn.inputs)\n    });\n  }\n  return extensionFunctions;\n}\n\n/**\n *\n * Returns txn data for keyless deploys as well as signer deploys.\n * Also provides a list of infra contracts to deploy.\n *\n * @internal\n *\n * @param metadataUri\n * @param storage\n * @param provider\n * @param create2Factory\n */\nasync function getDeploymentInfo(metadataUri, storage, provider, create2Factory, clientId, secretKey) {\n  caches.deploymentPresets = {};\n  const [create2FactoryAddress, {\n    compilerMetadata,\n    extendedMetadata\n  }] = await Promise.all([create2Factory ? create2Factory : getCreate2FactoryAddress(provider), fetchAndCacheDeployMetadata(metadataUri, storage)]);\n  const customParams = {};\n  const finalDeploymentInfo = [];\n  const defaultExtensions = extendedMetadata?.defaultExtensions;\n  if (extendedMetadata?.routerType === \"plugin\" && defaultExtensions) {\n    invariant(clientId || secretKey, \"Require Client Id / Secret Key\");\n    const publishedExtensions = await Promise.all(defaultExtensions.map(e => {\n      return fetchPublishedContractFromPolygon(e.publisherAddress, e.extensionName, e.extensionVersion, storage, clientId, secretKey);\n    }));\n    const pluginMetadata = (await Promise.all(publishedExtensions.map(c => fetchAndCacheDeployMetadata(c.metadataUri, storage)))).map(fetchedMetadata => fetchedMetadata.compilerMetadata);\n\n    // get deployment info for all plugins\n    const pluginDeploymentInfo = await Promise.all(pluginMetadata.map(metadata => computeDeploymentInfo(\"plugin\", provider, storage, create2FactoryAddress, {\n      metadata: metadata\n    }, clientId, secretKey)));\n\n    // create constructor param input for PluginMap\n    const mapInput = [];\n    pluginMetadata.forEach((metadata, index) => {\n      const input = generatePluginFunctions(pluginDeploymentInfo[index].transaction.predictedAddress, metadata.abi);\n      mapInput.push(...input);\n    });\n\n    // get PluginMap deployment transaction\n    const pluginMapTransaction = await computeDeploymentInfo(\"plugin\", provider, storage, create2FactoryAddress, {\n      contractName: \"PluginMap\",\n      constructorParams: {\n        _pluginsToAdd: {\n          value: mapInput\n        }\n      }\n    }, clientId, secretKey);\n\n    // address of PluginMap is input for MarketplaceV3's constructor\n    customParams[\"_pluginMap\"] = {\n      value: pluginMapTransaction.transaction.predictedAddress\n    };\n    finalDeploymentInfo.push(...pluginDeploymentInfo, pluginMapTransaction);\n  } else if (extendedMetadata?.routerType === \"dynamic\" && defaultExtensions) {\n    invariant(clientId || secretKey, \"Require Client Id / Secret Key\");\n    const publishedExtensions = await Promise.all(defaultExtensions.map(e => {\n      return fetchPublishedContractFromPolygon(e.publisherAddress, e.extensionName, e.extensionVersion, storage, clientId, secretKey);\n    }));\n    const extensionMetadata = (await Promise.all(publishedExtensions.map(async c => {\n      return fetchAndCacheDeployMetadata(c.metadataUri, storage);\n    }))).map(fetchedMetadata => fetchedMetadata.compilerMetadata);\n\n    // get deployment info for all extensions\n    const extensionDeploymentInfo = await Promise.all(extensionMetadata.map(metadata => computeDeploymentInfo(\"extension\", provider, storage, create2FactoryAddress, {\n      metadata: metadata\n    }, clientId, secretKey)));\n\n    // create constructor param input for BaseRouter\n    const routerInput = [];\n    extensionMetadata.forEach((metadata, index) => {\n      const extensionFunctions = generateExtensionFunctions(metadata.abi);\n      routerInput.push({\n        metadata: {\n          name: metadata.name,\n          metadataURI: \"\",\n          implementation: extensionDeploymentInfo[index].transaction.predictedAddress\n        },\n        functions: extensionFunctions\n      });\n    });\n\n    // routerInput as constructor param for BaseRouter\n    customParams[\"_extensions\"] = {\n      value: routerInput\n    };\n    finalDeploymentInfo.push(...extensionDeploymentInfo);\n  }\n  const [implementationDeployInfo, factoryInfo] = await Promise.all([computeDeploymentInfo(\"implementation\", provider, storage, create2FactoryAddress, {\n    metadata: compilerMetadata,\n    constructorParams: customParams\n  }, clientId, secretKey),\n  // get clone factory\n  computeDeploymentInfo(\"infra\", provider, storage, create2FactoryAddress, {\n    contractName: \"TWCloneFactory\"\n  }, clientId, secretKey)]);\n  finalDeploymentInfo.push(factoryInfo);\n  finalDeploymentInfo.push(...Object.values(caches.deploymentPresets));\n  finalDeploymentInfo.push(implementationDeployInfo);\n  return finalDeploymentInfo;\n}\n\nfunction estimateGasForDeploy(initCode) {\n  let gasLimit = utils.arrayify(initCode).map(x => x === 0 ? 4 : 16).reduce((sum, x) => sum + x) + 200 * initCode.length / 2 + 6 * Math.ceil(initCode.length / 64) + 32000 + 21000;\n  gasLimit = Math.floor(gasLimit * 64 / 63);\n  return gasLimit;\n}\n\nfunction createTransactionBatches(transactions) {\n  let upperGasLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GAS_LIMIT_FOR_DEPLOYER;\n  transactions = transactions.filter(tx => {\n    return tx.data.length > 0;\n  });\n  if (transactions.length === 0) {\n    return [];\n  }\n  const transactionBatches = [];\n  let sum = 0;\n  let batch = [];\n  transactions.forEach(tx => {\n    const gas = estimateGasForDeploy(tx.data);\n    if (sum + gas > upperGasLimit) {\n      if (batch.length === 0) {\n        transactionBatches.push([tx]);\n      } else {\n        transactionBatches.push(batch);\n        sum = gas;\n        batch = [tx];\n      }\n    } else {\n      sum += gas;\n      batch.push(tx);\n    }\n  });\n  if (batch.length > 0) {\n    transactionBatches.push(batch);\n  }\n  return transactionBatches;\n}\n\n/**\n * Deploy a contract at a deterministic address, using Create2 method\n * Address depends on the Create2 factory address.\n *\n * @public\n *\n * @param signer\n * @param bytecode\n * @param encodedArgs\n * @param create2FactoryAddress\n */\nasync function deployContractDeterministic(signer, transaction, options) {\n  let gasLimit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 7000000;\n  // Check if the implementation contract is already deployed\n  invariant(signer.provider, \"Provider required\");\n  const contractDeployed = await isContractDeployed(transaction.predictedAddress, signer.provider);\n  if (!contractDeployed) {\n    console.debug(`deploying contract via create2 factory at: ${transaction.predictedAddress}`);\n    const tx = {\n      to: transaction.to,\n      data: transaction.data\n    };\n    try {\n      await signer.estimateGas(tx);\n    } catch (e) {\n      console.debug(\"error estimating gas while deploying prebuilt: \", e);\n      tx.gasLimit = BigNumber.from(gasLimit);\n    }\n    options?.notifier?.(\"deploying\", \"preset\");\n    await (await signer.sendTransaction(tx)).wait();\n    options?.notifier?.(\"deployed\", \"preset\");\n  }\n}\n\nasync function deployWithThrowawayDeployer(signer, transactions, options) {\n  const transactionBatches = createTransactionBatches(transactions);\n  if (transactionBatches.length === 0) {\n    return;\n  }\n  options?.notifier?.(\"deploying\", \"infra\");\n  const deployTxns = await Promise.all(transactionBatches.map(txBatch => {\n    // Using the deployer contract, send the deploy transactions to common factory with a signer\n    const deployer = new ContractFactory(DEPLOYER_ABI, DEPLOYER_BYTECODE).connect(signer).deploy(txBatch);\n    return deployer;\n  }));\n  await Promise.all(deployTxns.map(tx => {\n    return tx.deployed();\n  }));\n  options?.notifier?.(\"deployed\", \"infra\");\n}\n\nexport { deployWithThrowawayDeployer as a, generateExtensionFunctions as b, createTransactionBatches as c, deployContractDeterministic as d, estimateGasForDeploy as e, getDeploymentInfo as g };\n"],
  "mappings": "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",
  "names": ["AdminFlag", "data", "payload", "signature"]
}
