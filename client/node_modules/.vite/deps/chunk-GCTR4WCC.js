import {
  e,
  i
} from "./chunk-DH52Z52Z.js";
import {
  _defineProperty
} from "./chunk-6OBQOEDS.js";
import {
  require_utils
} from "./chunk-BV4CII2J.js";
import {
  init_lib7 as init_lib
} from "./chunk-FA7CNXA4.js";
import {
  Signer,
  getDefaultProvider
} from "./chunk-7GXO2BXT.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";
import {
  __toESM
} from "./chunk-GN3OLCG2.js";

// node_modules/@thirdweb-dev/wallets/dist/embedded-wallet-24400fb5.browser.esm.js
init_shim();
init_lib();
var import_utils = __toESM(require_utils());
var EMBEDDED_WALLET_PATH = "/sdk/2022-08-12/embedded-wallet";
var GET_IFRAME_BASE_URL = () => `${i().replace("withpaper.com", "embedded-wallet.thirdweb.com")}`;
var WALLET_USER_DETAILS_LOCAL_STORAGE_NAME = (clientId) => `thirdwebEwsWalletUserDetails-${clientId}`;
var WALLET_USER_ID_LOCAL_STORAGE_NAME = (clientId) => `thirdwebEwsWalletUserId-${clientId}`;
var AUTH_TOKEN_LOCAL_STORAGE_PREFIX = "walletToken";
var AUTH_TOKEN_LOCAL_STORAGE_NAME = (clientId) => {
  return `${AUTH_TOKEN_LOCAL_STORAGE_PREFIX}-${clientId}`;
};
var DEVICE_SHARE_LOCAL_STORAGE_PREFIX = "a";
var DEVICE_SHARE_LOCAL_STORAGE_NAME = (clientId, userId) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}-${userId}`;
var DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED = (clientId) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}`;
var RecoveryShareManagement = function(RecoveryShareManagement2) {
  RecoveryShareManagement2["USER_MANAGED"] = "USER_MANAGED";
  RecoveryShareManagement2["CLOUD_MANAGED"] = "AWS_MANAGED";
  return RecoveryShareManagement2;
}({});
var AuthProvider = function(AuthProvider2) {
  AuthProvider2["COGNITO"] = "Cognito";
  AuthProvider2["GOOGLE"] = "Google";
  AuthProvider2["EMAIL_OTP"] = "EmailOtp";
  AuthProvider2["CUSTOM_JWT"] = "CustomJWT";
  AuthProvider2["FACEBOOK"] = "Facebook";
  AuthProvider2["APPLE"] = "Apple";
  return AuthProvider2;
}({});
var UserWalletStatus = function(UserWalletStatus2) {
  UserWalletStatus2["LOGGED_OUT"] = "Logged Out";
  UserWalletStatus2["LOGGED_IN_WALLET_UNINITIALIZED"] = "Logged In, Wallet Uninitialized";
  UserWalletStatus2["LOGGED_IN_NEW_DEVICE"] = "Logged In, New Device";
  UserWalletStatus2["LOGGED_IN_WALLET_INITIALIZED"] = "Logged In, Wallet Initialized";
  return UserWalletStatus2;
}({});
var data = /* @__PURE__ */ new Map();
var LocalStorage = class {
  constructor(_ref) {
    let {
      clientId
    } = _ref;
    this.isSupported = !!window.localStorage;
    this.clientId = clientId;
  }
  async getItem(key) {
    var _a;
    if (this.isSupported) {
      return window.localStorage.getItem(key);
    } else {
      return (_a = data.get(key)) != null ? _a : null;
    }
  }
  async setItem(key, value) {
    if (this.isSupported) {
      return window.localStorage.setItem(key, value);
    } else {
      data.set(key, value);
    }
  }
  async removeItem(key) {
    const item = await this.getItem(key);
    if (this.isSupported && item) {
      window.localStorage.removeItem(key);
      return true;
    }
    return false;
  }
  async saveAuthCookie(cookie) {
    await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);
  }
  async getAuthCookie() {
    return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));
  }
  async removeAuthCookie() {
    return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));
  }
  async saveDeviceShare(share, userId) {
    await this.saveWalletUserId(userId);
    await this.setItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId), share);
  }
  async getDeviceShare() {
    const userId = await this.getWalletUserId();
    if (userId) {
      return this.getItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));
    }
    return null;
  }
  async removeDeviceShare() {
    const userId = await this.getWalletUserId();
    if (userId) {
      return this.removeItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));
    }
    return false;
  }
  async getWalletUserId() {
    return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));
  }
  async saveWalletUserId(userId) {
    await this.setItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId), userId);
  }
  async removeWalletUserId() {
    return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));
  }
};
function sleep(seconds) {
  return new Promise((resolve) => {
    setTimeout(resolve, seconds * 1e3);
  });
}
var iframeBaseStyle = {
  height: "100%",
  width: "100%",
  border: "none",
  backgroundColor: "transparent",
  colorScheme: "light",
  position: "fixed",
  top: "0px",
  right: "0px",
  zIndex: "2147483646",
  display: "none"
};
var isIframeLoaded = /* @__PURE__ */ new Map();
var IframeCommunicator = class {
  constructor(_ref) {
    let {
      link,
      iframeId,
      container = document.body,
      iframeStyles,
      onIframeInitialize
    } = _ref;
    _defineProperty(this, "POLLING_INTERVAL_SECONDS", 1.4);
    this.iframeBaseUrl = GET_IFRAME_BASE_URL();
    let iframe = document.getElementById(iframeId);
    const hrefLink = new URL(link);
    const sdkVersion = "2.1.2";
    hrefLink.searchParams.set("sdkVersion", sdkVersion);
    if (!iframe || iframe.src !== hrefLink.href) {
      if (!iframe) {
        iframe = document.createElement("iframe");
        const mergedIframeStyles = {
          ...iframeBaseStyle,
          ...iframeStyles
        };
        Object.assign(iframe.style, mergedIframeStyles);
        iframe.setAttribute("id", iframeId);
        iframe.setAttribute("fetchpriority", "high");
        container.appendChild(iframe);
      }
      iframe.src = hrefLink.href;
      iframe.setAttribute("data-version", sdkVersion);
      const onIframeLoaded = (event) => {
        if (event.data.eventType === "ewsIframeLoaded") {
          window.removeEventListener("message", onIframeLoaded);
          if (!iframe) {
            console.warn("thirdweb Iframe not found");
            return;
          }
          this.onIframeLoadHandler(iframe, onIframeInitialize)();
        }
      };
      window.addEventListener("message", onIframeLoaded);
    }
    this.iframe = iframe;
  }
  async onIframeLoadedInitVariables() {
    return {};
  }
  onIframeLoadHandler(iframe, onIframeInitialize) {
    return async () => {
      const promise = new Promise(async (res, rej) => {
        var _a;
        const channel = new MessageChannel();
        channel.port1.onmessage = (event) => {
          const {
            data: data2
          } = event;
          channel.port1.close();
          if (!data2.success) {
            return rej(new Error(data2.error));
          }
          isIframeLoaded.set(iframe.src, true);
          if (onIframeInitialize) {
            onIframeInitialize();
          }
          return res(true);
        };
        const INIT_IFRAME_EVENT = "initIframe";
        (_a = iframe == null ? void 0 : iframe.contentWindow) == null ? void 0 : _a.postMessage(
          {
            eventType: INIT_IFRAME_EVENT,
            data: await this.onIframeLoadedInitVariables()
          },
          this.iframeBaseUrl,
          [channel.port2]
        );
      });
      await promise;
    };
  }
  async call(_ref2) {
    let {
      procedureName,
      params,
      showIframe = false
    } = _ref2;
    while (!isIframeLoaded.get(this.iframe.src)) {
      await sleep(this.POLLING_INTERVAL_SECONDS);
    }
    if (showIframe) {
      this.iframe.style.display = "block";
      await sleep(5e-3);
    }
    const promise = new Promise((res, rej) => {
      var _a;
      const channel = new MessageChannel();
      channel.port1.onmessage = async (event) => {
        const {
          data: data2
        } = event;
        channel.port1.close();
        if (showIframe) {
          await sleep(0.1);
          this.iframe.style.display = "none";
        }
        if (!data2.success) {
          rej(new Error(data2.error));
        } else {
          res(data2.data);
        }
      };
      (_a = this.iframe.contentWindow) == null ? void 0 : _a.postMessage({
        eventType: procedureName,
        data: params
      }, this.iframeBaseUrl, [channel.port2]);
    });
    return promise;
  }
  destroy() {
    isIframeLoaded.delete(this.iframe.src);
  }
};
var EmbeddedWalletIframeCommunicator = class extends IframeCommunicator {
  constructor(_ref) {
    let {
      clientId,
      customizationOptions
    } = _ref;
    super({
      iframeId: EMBEDDED_WALLET_IFRAME_ID,
      link: createEmbeddedWalletIframeLink({
        clientId,
        path: EMBEDDED_WALLET_PATH,
        queryParams: customizationOptions
      }).href,
      container: document.body
    });
    this.clientId = clientId;
  }
  async onIframeLoadedInitVariables() {
    const localStorage = new LocalStorage({
      clientId: this.clientId
    });
    return {
      authCookie: await localStorage.getAuthCookie(),
      deviceShareStored: await localStorage.getDeviceShare(),
      walletUserId: await localStorage.getWalletUserId(),
      clientId: this.clientId
    };
  }
};
function createEmbeddedWalletIframeLink(_ref2) {
  var _a;
  let {
    clientId,
    path,
    queryParams
  } = _ref2;
  const embeddedWalletUrl = new URL(`${path}`, GET_IFRAME_BASE_URL());
  if (queryParams) {
    for (const queryKey of Object.keys(queryParams)) {
      embeddedWalletUrl.searchParams.set(queryKey, ((_a = queryParams[queryKey]) == null ? void 0 : _a.toString()) || "");
    }
  }
  embeddedWalletUrl.searchParams.set("clientId", clientId);
  return embeddedWalletUrl;
}
var EMBEDDED_WALLET_IFRAME_ID = "thirdweb-embedded-wallet-iframe";
var AbstractLogin = class {
  constructor(_ref) {
    let {
      querier,
      preLogin,
      postLogin,
      clientId
    } = _ref;
    this.LoginQuerier = querier;
    this.preLogin = preLogin;
    this.postLogin = postLogin;
    this.clientId = clientId;
  }
  async sendEmailLoginOtp(_ref2) {
    let {
      email
    } = _ref2;
    await this.preLogin();
    const result = await this.LoginQuerier.call({
      procedureName: "sendThirdwebEmailLoginOtp",
      params: {
        email
      }
    });
    return result;
  }
};
var BaseLogin = class extends AbstractLogin {
  constructor() {
    super(...arguments);
    _defineProperty(this, "closeWindow", (_ref) => {
      let {
        isWindowOpenedByFn,
        win,
        closeOpenedWindow
      } = _ref;
      if (isWindowOpenedByFn) {
        win == null ? void 0 : win.close();
      } else {
        if (win && closeOpenedWindow) {
          closeOpenedWindow(win);
        } else if (win) {
          win.close();
        }
      }
    });
  }
  async getOauthLoginUrl(authProvider) {
    const result = await this.LoginQuerier.call({
      procedureName: "getHeadlessOauthLoginLink",
      params: {
        authProvider
      }
    });
    return result;
  }
  async loginWithModal() {
    await this.preLogin();
    const result = await this.LoginQuerier.call({
      procedureName: "loginWithThirdwebModal",
      params: void 0,
      showIframe: true
    });
    return this.postLogin(result);
  }
  async loginWithEmailOtp(_ref2) {
    let {
      email
    } = _ref2;
    await this.preLogin();
    const result = await this.LoginQuerier.call({
      procedureName: "loginWithThirdwebModal",
      params: {
        email
      },
      showIframe: true
    });
    return this.postLogin(result);
  }
  getOauthPopUpSizing(authProvider) {
    switch (authProvider) {
      case AuthProvider.FACEBOOK:
        return "width=715, height=555";
      default:
        return "width=350, height=500";
    }
  }
  async loginWithOauth(args) {
    let win = args == null ? void 0 : args.openedWindow;
    let isWindowOpenedByFn = false;
    if (!win) {
      win = window.open("", "Login", this.getOauthPopUpSizing(args.oauthProvider));
      isWindowOpenedByFn = true;
    }
    if (!win) {
      throw new Error("Something went wrong opening pop-up");
    }
    const [{
      loginLink
    }] = await Promise.all([this.getOauthLoginUrl(args.oauthProvider), this.preLogin()]);
    win.location.href = loginLink;
    const result = await new Promise((resolve, reject) => {
      const pollTimer = window.setInterval(async () => {
        if (!win) {
          return;
        }
        if (win.closed) {
          clearInterval(pollTimer);
          window.removeEventListener("message", messageListener);
          reject(new Error("User closed login window"));
        }
      }, 1e3);
      const messageListener = async (event) => {
        if (event.origin !== GET_IFRAME_BASE_URL()) {
          return;
        }
        if (typeof event.data !== "object") {
          reject(new Error("Invalid event data"));
          return;
        }
        switch (event.data.eventType) {
          case "userLoginSuccess": {
            window.removeEventListener("message", messageListener);
            clearInterval(pollTimer);
            this.closeWindow({
              isWindowOpenedByFn,
              win,
              closeOpenedWindow: args == null ? void 0 : args.closeOpenedWindow
            });
            if (event.data.authResult) {
              resolve(event.data.authResult);
            }
            break;
          }
          case "userLoginFailed": {
            window.removeEventListener("message", messageListener);
            clearInterval(pollTimer);
            this.closeWindow({
              isWindowOpenedByFn,
              win,
              closeOpenedWindow: args == null ? void 0 : args.closeOpenedWindow
            });
            reject(new Error(event.data.error));
            break;
          }
          case "injectDeveloperClientId": {
            win == null ? void 0 : win.postMessage({
              eventType: "injectDeveloperClientIdResult",
              developerClientId: this.clientId,
              authOption: args.oauthProvider
            }, GET_IFRAME_BASE_URL());
            break;
          }
        }
      };
      window.addEventListener("message", messageListener);
    });
    return this.postLogin({
      storedToken: {
        ...result.storedToken,
        shouldStoreCookieString: true
      },
      walletDetails: {
        ...result.walletDetails,
        isIframeStorageEnabled: false
      }
    });
  }
  async loginWithCustomJwt(_ref3) {
    let {
      encryptionKey,
      jwt
    } = _ref3;
    const result = await this.LoginQuerier.call({
      procedureName: "loginWithCustomJwt",
      params: {
        encryptionKey,
        jwt
      }
    });
    return this.postLogin(result);
  }
  async verifyEmailLoginOtp(_ref4) {
    let {
      email,
      otp,
      recoveryCode
    } = _ref4;
    const result = await this.LoginQuerier.call({
      procedureName: "verifyThirdwebEmailLoginOtp",
      params: {
        email,
        otp,
        recoveryCode
      }
    });
    return this.postLogin(result);
  }
};
var Auth = class {
  constructor(_ref) {
    let {
      clientId,
      querier,
      onAuthSuccess
    } = _ref;
    this.clientId = clientId;
    this.AuthQuerier = querier;
    this.localStorage = new LocalStorage({
      clientId
    });
    this.onAuthSuccess = onAuthSuccess;
    this.BaseLogin = new BaseLogin({
      postLogin: async (result) => {
        return this.postLogin(result);
      },
      preLogin: async () => {
        await this.preLogin();
      },
      querier,
      clientId
    });
  }
  async preLogin() {
    await this.logout();
  }
  async postLogin(_ref2) {
    let {
      storedToken,
      walletDetails
    } = _ref2;
    if (storedToken.shouldStoreCookieString) {
      await this.localStorage.saveAuthCookie(storedToken.cookieString);
    }
    const initializedUser = await this.onAuthSuccess({
      storedToken,
      walletDetails
    });
    return initializedUser;
  }
  async loginWithModal() {
    await this.preLogin();
    return this.BaseLogin.loginWithModal();
  }
  async loginWithEmailOtp(args) {
    return this.BaseLogin.loginWithEmailOtp(args);
  }
  async loginWithCustomJwt(args) {
    return this.BaseLogin.loginWithCustomJwt(args);
  }
  async loginWithOauth(args) {
    return this.BaseLogin.loginWithOauth(args);
  }
  async sendEmailLoginOtp(_ref3) {
    let {
      email
    } = _ref3;
    return this.BaseLogin.sendEmailLoginOtp({
      email
    });
  }
  async verifyEmailLoginOtp(args) {
    return this.BaseLogin.verifyEmailLoginOtp(args);
  }
  async logout() {
    const {
      success
    } = await this.AuthQuerier.call({
      procedureName: "logout",
      params: void 0
    });
    const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();
    const isRemoveUserId = await this.localStorage.removeWalletUserId();
    return {
      success: success || isRemoveAuthCookie || isRemoveUserId
    };
  }
};
var EthersSigner = class extends Signer {
  constructor(_ref) {
    var _a;
    let {
      provider,
      clientId,
      querier
    } = _ref;
    super();
    _defineProperty(this, "DEFAULT_ETHEREUM_CHAIN_ID", 5);
    this.clientId = clientId;
    this.querier = querier;
    this.endpoint = (_a = provider.connection) == null ? void 0 : _a.url;
    (0, import_utils.defineReadOnly)(this, "provider", provider);
  }
  async getAddress() {
    const {
      address
    } = await this.querier.call({
      procedureName: "getAddress",
      params: void 0
    });
    return address;
  }
  async signMessage(message) {
    var _a, _b, _c;
    const {
      signedMessage
    } = await this.querier.call({
      procedureName: "signMessage",
      params: {
        message,
        chainId: (_c = (_b = await ((_a = this.provider) == null ? void 0 : _a.getNetwork())) == null ? void 0 : _b.chainId) != null ? _c : this.DEFAULT_ETHEREUM_CHAIN_ID,
        rpcEndpoint: this.endpoint
      }
    });
    return signedMessage;
  }
  async signTransaction(transaction) {
    var _a, _b, _c;
    const {
      signedTransaction
    } = await this.querier.call({
      procedureName: "signTransaction",
      params: {
        transaction,
        chainId: (_c = (_b = await ((_a = this.provider) == null ? void 0 : _a.getNetwork())) == null ? void 0 : _b.chainId) != null ? _c : this.DEFAULT_ETHEREUM_CHAIN_ID,
        rpcEndpoint: this.endpoint
      }
    });
    return signedTransaction;
  }
  async _signTypedData(domain, types, message) {
    var _a, _b, _c;
    const {
      signedTypedData
    } = await this.querier.call({
      procedureName: "signTypedDataV4",
      params: {
        domain,
        types,
        message,
        chainId: (_c = (_b = await ((_a = this.provider) == null ? void 0 : _a.getNetwork())) == null ? void 0 : _b.chainId) != null ? _c : this.DEFAULT_ETHEREUM_CHAIN_ID,
        rpcEndpoint: this.endpoint
      }
    });
    return signedTypedData;
  }
  connect(provider) {
    return new EthersSigner({
      clientId: this.clientId,
      provider,
      querier: this.querier
    });
  }
};
var EmbeddedWallet = class {
  constructor(_ref) {
    let {
      clientId,
      chain,
      querier
    } = _ref;
    this.clientId = clientId;
    this.chain = chain;
    this.walletManagerQuerier = querier;
    this.localStorage = new LocalStorage({
      clientId
    });
  }
  async postWalletSetUp(_ref2) {
    let {
      deviceShareStored,
      walletAddress,
      isIframeStorageEnabled,
      walletUserId
    } = _ref2;
    if (!isIframeStorageEnabled) {
      await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);
    }
    return {
      walletAddress
    };
  }
  async getUserWalletStatus() {
    const userStatus = await this.walletManagerQuerier.call({
      procedureName: "getUserStatus",
      params: void 0
    });
    if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {
      return {
        status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,
        ...userStatus.user,
        wallet: this
      };
    } else if (userStatus.status === UserWalletStatus.LOGGED_IN_NEW_DEVICE) {
      return {
        status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,
        ...userStatus.user
      };
    } else if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED) {
      return {
        status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,
        ...userStatus.user
      };
    } else {
      return {
        status: userStatus.status
      };
    }
  }
  async setChain(_ref3) {
    let {
      chain
    } = _ref3;
    this.chain = chain;
  }
  async getEthersJsSigner(network) {
    var _a;
    const signer = new EthersSigner({
      clientId: this.clientId,
      provider: getDefaultProvider((_a = network == null ? void 0 : network.rpcEndpoint) != null ? _a : e[this.chain]),
      querier: this.walletManagerQuerier
    });
    return signer;
  }
};
var EmbeddedWalletSdk = class {
  isClientIdLegacyPaper(clientId) {
    if (clientId.indexOf("-") > 0 && clientId.length === 36) {
      return true;
    } else {
      return false;
    }
  }
  constructor(_ref) {
    let {
      clientId,
      chain,
      styles,
      onAuthSuccess
    } = _ref;
    if (this.isClientIdLegacyPaper(clientId)) {
      throw new Error("You are using a legacy clientId. Please use the clientId found on the thirdweb dashboard settings page");
    }
    this.clientId = clientId;
    this.querier = new EmbeddedWalletIframeCommunicator({
      clientId,
      customizationOptions: styles
    });
    this.wallet = new EmbeddedWallet({
      clientId,
      chain,
      querier: this.querier
    });
    this.auth = new Auth({
      clientId,
      querier: this.querier,
      onAuthSuccess: async (authResult) => {
        onAuthSuccess == null ? void 0 : onAuthSuccess(authResult);
        await this.wallet.postWalletSetUp({
          ...authResult.walletDetails,
          walletUserId: authResult.storedToken.authDetails.userWalletId
        });
        await this.querier.call({
          procedureName: "initIframe",
          params: {
            deviceShareStored: authResult.walletDetails.deviceShareStored,
            clientId: this.clientId,
            walletUserId: authResult.storedToken.authDetails.userWalletId,
            authCookie: authResult.storedToken.cookieString
          }
        });
        return {
          user: {
            status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,
            authDetails: authResult.storedToken.authDetails,
            wallet: this.wallet,
            walletAddress: authResult.walletDetails.walletAddress
          }
        };
      }
    });
  }
  async getUser() {
    return this.wallet.getUserWalletStatus();
  }
};

export {
  WALLET_USER_DETAILS_LOCAL_STORAGE_NAME,
  WALLET_USER_ID_LOCAL_STORAGE_NAME,
  AUTH_TOKEN_LOCAL_STORAGE_NAME,
  DEVICE_SHARE_LOCAL_STORAGE_NAME,
  DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED,
  RecoveryShareManagement,
  AuthProvider,
  UserWalletStatus,
  EmbeddedWalletSdk
};
//# sourceMappingURL=chunk-GCTR4WCC.js.map
