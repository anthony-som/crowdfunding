import {
  InputSelectionUI,
  ToolTip,
  appleIconUri,
  bitbucketIconUri,
  discordIconUri,
  emailAndPhoneIcon,
  emailIcon,
  facebookIconUri,
  githubIconUri,
  gitlabIconUri,
  googleIconUri,
  linkedinIconUri,
  microsoftIconUri,
  phoneIcon,
  reservedScreens,
  twitchIconUri,
  twitterIconUri,
  useScreenContext
} from "./chunk-UGMDPVJD.js";
import {
  Button,
  Container,
  IconButton,
  Img,
  ModalHeader,
  Spacer,
  Spinner,
  TextDivider,
  WalletEntryButton,
  fontSize,
  iconSize,
  newStyled,
  spacing,
  useConnect,
  useTWLocale
} from "./chunk-NLZ3TCNG.js";
import {
  MagicLink
} from "./chunk-6JWXQSCU.js";
import {
  require_jsx_runtime
} from "./chunk-3FPM5NHH.js";
import {
  require_react
} from "./chunk-U2VBBHZY.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";
import {
  __toESM
} from "./chunk-GN3OLCG2.js";

// node_modules/@thirdweb-dev/react/dist/magicLink-995eca7e.browser.esm.js
init_shim();
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
function magicLink(config) {
  var _a;
  const emailLoginEnabled = config.emailLogin !== false;
  const smsLoginEnabled = config.smsLogin !== false;
  const oauthProviders = (_a = config.oauthOptions) == null ? void 0 : _a.providers;
  const type = config.type || "auth";
  let icon = emailAndPhoneIcon;
  let iconText = "Email or phone";
  if (emailLoginEnabled && !smsLoginEnabled) {
    icon = emailIcon;
    iconText = "Email";
  }
  if (!emailLoginEnabled && smsLoginEnabled) {
    icon = phoneIcon;
    iconText = "Phone number";
  }
  if (!emailLoginEnabled && !smsLoginEnabled) {
    iconText = "Social login";
  }
  return {
    category: "socialLogin",
    id: MagicLink.id,
    recommended: config == null ? void 0 : config.recommended,
    isHeadless: true,
    meta: {
      ...MagicLink.meta,
      name: iconText,
      iconURL: icon
    },
    create: (options) => new MagicLink({
      ...options,
      ...config
    }),
    connectUI(props) {
      if (props.modalSize === "wide") {
        return (0, import_jsx_runtime.jsx)(MagicConnectionUIScreen, {
          ...props,
          type,
          emailLogin: emailLoginEnabled,
          smsLogin: smsLoginEnabled,
          oauthProviders
        });
      }
      if (props.selectionData === void 0) {
        return (0, import_jsx_runtime.jsx)(MagicConnectionUIScreen, {
          ...props,
          type,
          emailLogin: emailLoginEnabled,
          smsLogin: smsLoginEnabled,
          oauthProviders
        });
      }
      return (0, import_jsx_runtime.jsx)(MagicConnectingUI, {
        ...props,
        type
      });
    },
    selectUI: config.type === "connect" ? void 0 : (props) => {
      return (0, import_jsx_runtime.jsx)(MagicSelectUI, {
        ...props,
        emailLoginEnabled,
        smsLoginEnabled,
        oauthProviders
      });
    },
    isInstalled() {
      return false;
    }
  };
}
var MagicSelectUI = (props) => {
  const screen = useScreenContext();
  if (props.modalSize === "wide" || screen !== reservedScreens.main && props.modalSize === "compact") {
    return (0, import_jsx_runtime.jsx)(WalletEntryButton, {
      walletConfig: props.walletConfig,
      selectWallet: () => props.onSelect(void 0)
    });
  }
  return (0, import_jsx_runtime.jsx)(MagicUI, {
    ...props,
    emailLogin: props.emailLoginEnabled,
    smsLogin: props.smsLoginEnabled,
    oauthProviders: props.oauthProviders
  });
};
var MagicUI = (props) => {
  const cwLocale = useTWLocale().connectWallet;
  const locale = useTWLocale().wallets.magicLink;
  const isEmailEnabled = props.emailLogin !== false;
  const isSMSEnabled = props.smsLogin !== false;
  let placeholder = locale.loginWithEmailOrPhone;
  let type = "text";
  let emptyErrorMessage = locale.emailOrPhoneRequired;
  if (isEmailEnabled && !isSMSEnabled) {
    placeholder = locale.emailPlaceholder;
    emptyErrorMessage = locale.emailRequired;
    type = "email";
  } else if (!isEmailEnabled && isSMSEnabled) {
    placeholder = locale.loginWithPhone;
    emptyErrorMessage = locale.phoneRequired;
    type = "tel";
  }
  if (!isEmailEnabled && !isSMSEnabled && !props.oauthProviders) {
    throw new Error('MagicLink must have either "emailLogin" or "smsLogin" or social login enabled');
  }
  const showInputUI = isEmailEnabled || isSMSEnabled;
  const screen = useScreenContext();
  const showSeparator = props.modalSize === "wide" || screen !== reservedScreens.main && props.modalSize === "compact";
  return (0, import_jsx_runtime.jsxs)(Container, {
    flex: "column",
    animate: "fadein",
    gap: props.modalSize === "compact" ? "lg" : "xl",
    style: {
      width: "100%"
    },
    children: [props.oauthProviders && (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
      children: props.oauthProviders.length >= 3 ? (0, import_jsx_runtime.jsx)(Container, {
        gap: "md",
        flex: "row",
        center: "x",
        children: props.oauthProviders.map((provider) => {
          return (0, import_jsx_runtime.jsx)(SocialIconButton, {
            onClick: () => {
              props.onSelect({
                provider
              });
            },
            children: (0, import_jsx_runtime.jsx)(ToolTip, {
              tip: `${locale.loginWith} ${upperCaseFirstLetter(provider)}`,
              sideOffset: 15,
              children: (0, import_jsx_runtime.jsx)(Container, {
                flex: "row",
                center: "both",
                children: (0, import_jsx_runtime.jsx)(Img, {
                  src: providerImages[provider],
                  width: iconSize.lg,
                  height: iconSize.lg,
                  alt: ""
                })
              })
            })
          }, provider);
        })
      }) : (0, import_jsx_runtime.jsx)(Container, {
        gap: "xs",
        flex: "column",
        children: props.oauthProviders.map((provider) => {
          return (0, import_jsx_runtime.jsxs)(SocialButtonLarge, {
            variant: "secondary",
            onClick: () => {
              props.onSelect({
                provider
              });
            },
            children: [(0, import_jsx_runtime.jsx)(Img, {
              src: providerImages[provider],
              width: iconSize.md,
              height: iconSize.md,
              alt: ""
            }), (0, import_jsx_runtime.jsxs)("span", {
              children: [locale.loginWith, " ", upperCaseFirstLetter(provider)]
            })]
          }, provider);
        })
      })
    }), showInputUI && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [showSeparator && (0, import_jsx_runtime.jsx)(TextDivider, {
        text: cwLocale.or
      }), (0, import_jsx_runtime.jsx)(InputSelectionUI, {
        submitButtonText: locale.submitEmail,
        onSelect: props.onSelect,
        placeholder,
        name: "magic-input",
        type,
        emptyErrorMessage,
        errorMessage: (input) => {
          const isEmail = input.includes("@");
          const isPhone = Number.isInteger(Number(input[input.length - 1]));
          if (isEmail && isEmailEnabled) {
            const emailRegex = /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,})$/g;
            const isValidEmail = emailRegex.test(input.replace(/\+/g, ""));
            if (!isValidEmail) {
              return locale.invalidEmail;
            }
          } else if (isPhone && isSMSEnabled) {
            if (!input.startsWith("+")) {
              return locale.countryCodeMissing;
            }
          } else {
            if (isEmailEnabled && isSMSEnabled) {
              return locale.invalidEmailOrPhone;
            }
            if (isEmailEnabled) {
              return locale.invalidEmail;
            }
            if (isSMSEnabled) {
              return locale.invalidPhone;
            }
          }
        }
      })]
    })]
  });
};
function useConnectMagic() {
  const connect = useConnect();
  const connector = (0, import_react.useCallback)(async (data) => {
    const {
      selectionData,
      walletConfig,
      singleWallet,
      connected,
      show,
      hide
    } = data;
    if (typeof selectionData === "object") {
      try {
        hide();
        (async () => {
          await connect(walletConfig, {
            oauthProvider: selectionData.provider
          });
        })();
        connected();
      } catch {
        if (!singleWallet) {
          show();
        }
      }
      return;
    }
    const isEmail = selectionData ? selectionData.includes("@") : false;
    (async () => {
      hide();
      try {
        await connect(walletConfig, data.type === "connect" ? {} : isEmail ? {
          email: selectionData
        } : {
          phoneNumber: selectionData
        });
        connected();
      } catch (e) {
        if (!singleWallet) {
          show();
        }
        console.error(e);
      }
    })();
  }, [connect]);
  return connector;
}
var MagicConnectingUI = (_ref) => {
  let {
    connected,
    walletConfig,
    show,
    selectionData,
    supportedWallets,
    type,
    hide
  } = _ref;
  const connectPrompted = (0, import_react.useRef)(false);
  const singleWallet = supportedWallets.length === 1;
  const connectMagic = useConnectMagic();
  (0, import_react.useEffect)(() => {
    if (connectPrompted.current) {
      return;
    }
    connectPrompted.current = true;
    connectMagic({
      selectionData,
      singleWallet,
      type,
      walletConfig,
      show,
      connected,
      hide
    });
  }, [connectMagic, connected, selectionData, show, singleWallet, type, walletConfig, hide]);
  return (0, import_jsx_runtime.jsx)(Container, {
    flex: "row",
    center: "both",
    style: {
      minHeight: "350px"
    },
    children: (0, import_jsx_runtime.jsx)(Spinner, {
      size: "xl",
      color: "accentText"
    })
  });
};
var MagicConnectionUIScreen = (props) => {
  const locale = useTWLocale().wallets.magicLink;
  const connectMagic = useConnectMagic();
  return (0, import_jsx_runtime.jsxs)(Container, {
    p: "lg",
    fullHeight: true,
    flex: "column",
    style: {
      minHeight: "300px"
    },
    children: [(0, import_jsx_runtime.jsx)(ModalHeader, {
      onBack: props.goBack,
      title: locale.signIn
    }), (0, import_jsx_runtime.jsx)(Spacer, {
      y: "xl"
    }), (0, import_jsx_runtime.jsx)(Container, {
      expand: true,
      flex: "column",
      center: "both",
      px: props.modalSize === "wide" ? "lg" : void 0,
      children: (0, import_jsx_runtime.jsx)(MagicUI, {
        ...props,
        onSelect: (data) => {
          connectMagic({
            selectionData: data,
            connected: props.connected,
            show: props.show,
            singleWallet: props.supportedWallets.length === 1,
            type: props.type,
            walletConfig: props.walletConfig,
            hide: props.hide
          });
        }
      })
    })]
  });
};
var providerImages = {
  google: googleIconUri,
  facebook: facebookIconUri,
  twitter: twitterIconUri,
  github: githubIconUri,
  apple: appleIconUri,
  linkedin: linkedinIconUri,
  bitbucket: bitbucketIconUri,
  gitlab: gitlabIconUri,
  twitch: twitchIconUri,
  discord: discordIconUri,
  microsoft: microsoftIconUri
};
function upperCaseFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
var SocialButtonLarge = newStyled(Button)`
  display: flex;
  justify-content: flex-start;
  gap: ${spacing.md};
  font-size: ${fontSize.md};
  transition: background-color 0.2s ease;
  &:hover {
    background-color: ${(p) => p.theme.colors.secondaryButtonBg};
  }
  &:active {
    box-shadow: none;
  }
`;
var SocialIconButton = newStyled(IconButton)`
  border: 1px solid ${(p) => p.theme.colors.borderColor};
  padding: ${spacing.xs};
`;

export {
  magicLink
};
//# sourceMappingURL=chunk-JIS2FWXM.js.map
