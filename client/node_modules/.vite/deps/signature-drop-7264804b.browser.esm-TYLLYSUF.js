import {
  StandardErc721
} from "./chunk-V5EO7OBU.js";
import {
  Erc721WithQuantitySignatureMintable
} from "./chunk-FNLDSW7Y.js";
import {
  DropClaimConditions
} from "./chunk-BBA5PV2Q.js";
import {
  PaperCheckout
} from "./chunk-OQCP44SL.js";
import {
  ContractPrimarySale
} from "./chunk-KGA76LF5.js";
import {
  ContractPlatformFee
} from "./chunk-QK4JEBIZ.js";
import {
  ContractInterceptor
} from "./chunk-DPOR3A6N.js";
import {
  ContractOwner,
  ContractRoyalty,
  DelayedReveal
} from "./chunk-HZR66ZXR.js";
import {
  require_dist,
  require_fast_deep_equal
} from "./chunk-VQJOYVXP.js";
import "./chunk-D3VDM4TG.js";
import {
  DEFAULT_QUERY_ALL_COUNT
} from "./chunk-WC5X2JDA.js";
import "./chunk-HP5C2NQN.js";
import {
  ContractRoles
} from "./chunk-ADD6T2O6.js";
import {
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractMetadata,
  GasCostEstimator
} from "./chunk-UEMNZHIS.js";
import {
  AbiSchema,
  ContractWrapper,
  DropErc721ContractSchema,
  FEATURE_NFT_REVEALABLE,
  NFT_BASE_CONTRACT_ROLES,
  Transaction,
  buildTransactionFunction,
  getRoleHash,
  require_bs58
} from "./chunk-3RUZ5SWH.js";
import {
  require_utils
} from "./chunk-BV4CII2J.js";
import "./chunk-457LSDR5.js";
import "./chunk-I4TCAHS5.js";
import {
  init_lib7 as init_lib
} from "./chunk-FA7CNXA4.js";
import {
  BigNumber,
  lib_exports8 as lib_exports
} from "./chunk-7GXO2BXT.js";
import "./chunk-NO757KM3.js";
import {
  require_bn
} from "./chunk-37L3W2XO.js";
import "./chunk-HZQFHQLI.js";
import "./chunk-RW4LJ3ZA.js";
import "./chunk-YDRBHGWK.js";
import "./chunk-DHMVYZV7.js";
import "./chunk-7DQHQEI5.js";
import "./chunk-UVXELCFU.js";
import "./chunk-SMUNBUKY.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";
import {
  __publicField,
  __toESM
} from "./chunk-GN3OLCG2.js";

// node_modules/@thirdweb-dev/sdk/dist/signature-drop-7264804b.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_merkletreejs = __toESM(require_dist());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var _SignatureDrop = class extends StandardErc721 {
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    super(contractWrapper, storage, chainId);
    __publicField(this, "createBatch", buildTransactionFunction(async (metadatas, options) => {
      return this.erc721.lazyMint.prepare(metadatas, options);
    }));
    __publicField(this, "claimTo", buildTransactionFunction(async (destinationAddress, quantity, options) => {
      return this.erc721.claimTo.prepare(destinationAddress, quantity, options);
    }));
    __publicField(this, "claim", buildTransactionFunction(async (quantity, options) => {
      return this.erc721.claim.prepare(quantity, options);
    }));
    __publicField(this, "burn", buildTransactionFunction(async (tokenId) => {
      return this.erc721.burn.prepare(tokenId);
    }));
    this.abi = AbiSchema.parse(abi || []);
    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, _SignatureDrop.contractRoles);
    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);
    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);
    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());
    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);
    this.owner = new ContractOwner(this.contractWrapper);
    this.checkout = new PaperCheckout(this.contractWrapper);
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.address;
  }
  async totalSupply() {
    const [claimed, unclaimed] = await Promise.all([this.totalClaimedSupply(), this.totalUnclaimedSupply()]);
    return claimed.add(unclaimed);
  }
  async getAllClaimed(queryParams) {
    const start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();
    const count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();
    const maxId = Math.min((await this.totalClaimedSupply()).toNumber(), start + count);
    return await Promise.all(Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())));
  }
  async getAllUnclaimed(queryParams) {
    const start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();
    const count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();
    const firstTokenId = BigNumber.from(Math.max((await this.totalClaimedSupply()).toNumber(), start));
    const maxId = BigNumber.from(Math.min((await this.contractWrapper.read("nextTokenIdToMint", [])).toNumber(), firstTokenId.toNumber() + count));
    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map((i) => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));
  }
  async totalClaimedSupply() {
    return this.erc721.totalClaimedSupply();
  }
  async totalUnclaimedSupply() {
    return this.erc721.totalUnclaimedSupply();
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.read("hasRole", [getRoleHash("transfer"), lib_exports.AddressZero]);
    return !anyoneCanTransfer;
  }
  async getClaimTransaction(destinationAddress, quantity, options) {
    return this.erc721.getClaimTransaction(destinationAddress, quantity, options);
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
var SignatureDrop = _SignatureDrop;
__publicField(SignatureDrop, "contractRoles", NFT_BASE_CONTRACT_ROLES);
export {
  SignatureDrop
};
//# sourceMappingURL=signature-drop-7264804b.browser.esm-TYLLYSUF.js.map
