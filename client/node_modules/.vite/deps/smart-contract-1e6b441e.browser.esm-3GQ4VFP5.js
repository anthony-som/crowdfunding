import {
  Account,
  AccountFactory,
  ContractPublishedMetadata,
  deployContractDeterministic,
  deployWithThrowawayDeployer,
  generateExtensionFunctions,
  getDeploymentInfo
} from "./chunk-FDQU4DVM.js";
import {
  Erc20
} from "./chunk-7IP36X6S.js";
import {
  MarketplaceV3DirectListings,
  MarketplaceV3EnglishAuctions,
  MarketplaceV3Offers
} from "./chunk-5QXB34WU.js";
import "./chunk-KXRTQPGJ.js";
import {
  Erc721
} from "./chunk-FNLDSW7Y.js";
import "./chunk-BBA5PV2Q.js";
import "./chunk-6TRV3EHZ.js";
import {
  Erc1155
} from "./chunk-ST2QVM5G.js";
import {
  ContractPrimarySale
} from "./chunk-KGA76LF5.js";
import {
  ContractPlatformFee
} from "./chunk-QK4JEBIZ.js";
import {
  ContractInterceptor
} from "./chunk-DPOR3A6N.js";
import {
  ContractOwner,
  ContractRoyalty
} from "./chunk-HZR66ZXR.js";
import {
  require_dist,
  require_fast_deep_equal
} from "./chunk-VQJOYVXP.js";
import {
  assertEnabled
} from "./chunk-D3VDM4TG.js";
import "./chunk-WC5X2JDA.js";
import "./chunk-HP5C2NQN.js";
import {
  ContractRoles
} from "./chunk-ADD6T2O6.js";
import {
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractMetadata,
  GasCostEstimator,
  detectContractFeature
} from "./chunk-UEMNZHIS.js";
import {
  ALL_ROLES,
  AbiSchema,
  CommonContractSchema,
  ContractWrapper,
  CustomContractSchema,
  FEATURE_ACCOUNT,
  FEATURE_ACCOUNT_FACTORY,
  FEATURE_AIRDROP_ERC1155,
  FEATURE_AIRDROP_ERC20,
  FEATURE_AIRDROP_ERC721,
  FEATURE_APPURI,
  FEATURE_DIRECT_LISTINGS,
  FEATURE_DYNAMIC_CONTRACT,
  FEATURE_EDITION,
  FEATURE_ENGLISH_AUCTIONS,
  FEATURE_NFT,
  FEATURE_OFFERS,
  FEATURE_OWNER,
  FEATURE_PERMISSIONS,
  FEATURE_PLATFORM_FEE,
  FEATURE_PRIMARY_SALE,
  FEATURE_ROYALTY,
  FEATURE_TOKEN,
  THIRDWEB_DEPLOYER,
  Transaction,
  buildTransactionFunction,
  fetchContractMetadataFromAddress,
  fetchPublishedContractFromPolygon,
  invariant,
  joinABIs,
  require_bs58
} from "./chunk-3RUZ5SWH.js";
import {
  require_utils
} from "./chunk-BV4CII2J.js";
import "./chunk-457LSDR5.js";
import "./chunk-I4TCAHS5.js";
import {
  init_lib7 as init_lib,
  utils_exports
} from "./chunk-FA7CNXA4.js";
import "./chunk-7GXO2BXT.js";
import "./chunk-NO757KM3.js";
import {
  require_bn
} from "./chunk-37L3W2XO.js";
import "./chunk-HZQFHQLI.js";
import "./chunk-RW4LJ3ZA.js";
import "./chunk-YDRBHGWK.js";
import "./chunk-DHMVYZV7.js";
import "./chunk-7DQHQEI5.js";
import "./chunk-UVXELCFU.js";
import "./chunk-SMUNBUKY.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";
import {
  __publicField,
  __toESM
} from "./chunk-GN3OLCG2.js";

// node_modules/@thirdweb-dev/sdk/dist/smart-contract-1e6b441e.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_merkletreejs = __toESM(require_dist());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var Airdrop1155 = class {
  constructor(contractWrapper) {
    __publicField(this, "featureName", FEATURE_AIRDROP_ERC1155.name);
    __publicField(this, "drop", buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "airdropERC1155",
        args: [tokenAddress, tokenOwner, contents],
        parse: (receipt) => {
          const events = this.contractWrapper.parseLogs("AirdropFailed", receipt.logs);
          const failedDrops = events.map((e) => {
            return {
              recipient: e.args.recipient,
              tokenId: e.args.tokenId.toNumber(),
              amount: e.args.amount.toString()
            };
          });
          return {
            successfulDropCount: contents.length - failedDrops.length,
            failedDropCount: failedDrops.length,
            failedDrops
          };
        }
      });
    }));
    this.contractWrapper = contractWrapper;
  }
  getAddress() {
    return this.contractWrapper.address;
  }
};
var Airdrop20 = class {
  constructor(contractWrapper) {
    __publicField(this, "featureName", FEATURE_AIRDROP_ERC20.name);
    __publicField(this, "drop", buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "airdropERC20",
        args: [tokenAddress, tokenOwner, contents],
        parse: (receipt) => {
          const events = this.contractWrapper.parseLogs("AirdropFailed", receipt.logs);
          const failedDrops = events.map((e) => {
            return {
              recipient: e.args.recipient,
              amount: e.args.amount.toString()
            };
          });
          return {
            successfulDropCount: contents.length - failedDrops.length,
            failedDropCount: failedDrops.length,
            failedDrops
          };
        }
      });
    }));
    this.contractWrapper = contractWrapper;
  }
  getAddress() {
    return this.contractWrapper.address;
  }
};
var Airdrop721 = class {
  constructor(contractWrapper) {
    __publicField(this, "featureName", FEATURE_AIRDROP_ERC721.name);
    __publicField(this, "drop", buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "airdropERC721",
        args: [tokenAddress, tokenOwner, contents],
        parse: (receipt) => {
          const events = this.contractWrapper.parseLogs("AirdropFailed", receipt.logs);
          const failedDrops = events.map((e) => {
            return {
              recipient: e.args.recipient,
              tokenId: e.args.tokenId.toNumber()
            };
          });
          return {
            successfulDropCount: contents.length - failedDrops.length,
            failedDropCount: failedDrops.length,
            failedDrops
          };
        }
      });
    }));
    this.contractWrapper = contractWrapper;
  }
  getAddress() {
    return this.contractWrapper.address;
  }
};
var ExtensionManager = class {
  constructor(contractWrapper) {
    __publicField(this, "featureName", FEATURE_DYNAMIC_CONTRACT.name);
    __publicField(this, "add", buildTransactionFunction(async (inputArgs) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "addExtension",
        args: [inputArgs.extension],
        parse: async (receipt) => {
          const events = this.contractWrapper.parseLogs("ExtensionAdded", receipt.logs);
          if (events.length < 1) {
            throw new Error("No ExtensionAdded event found");
          }
          const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;
          const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);
          const updatedAbi = joinABIs([AbiSchema.parse(this.contractWrapper.abi), abiToAdd]);
          this.contractWrapper.updateAbi(updatedAbi);
          return receipt;
        }
      });
    }));
    __publicField(this, "addDeployed", buildTransactionFunction(async (inputArgs) => {
      let extensionAbi = inputArgs.extensionAbi;
      if (!extensionAbi) {
        const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);
        extensionAbi = metadata.abi;
      }
      invariant(extensionAbi, "Require extension ABI");
      let extensionMetadataUri = "";
      if (inputArgs.extensionMetadata) {
        if (typeof inputArgs.extensionMetadata === "string") {
          extensionMetadataUri = inputArgs.extensionMetadata;
        } else {
          const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);
          extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);
        }
      }
      const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));
      const extension = {
        metadata: {
          name: inputArgs.extensionName,
          metadataURI: extensionMetadataUri,
          implementation: inputArgs.extensionAddress
        },
        functions: extensionFunctions
      };
      return this.add.prepare({
        extension,
        extensionAbi
      });
    }));
    __publicField(this, "addPublished", buildTransactionFunction(async (inputArgs) => {
      const version = inputArgs.version || "latest";
      const {
        deployedExtensionAddress,
        extensionMetadata
      } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);
      return this.addDeployed.prepare({
        extensionName: inputArgs.extensionName,
        extensionAddress: deployedExtensionAddress,
        extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata
      });
    }));
    __publicField(this, "replace", buildTransactionFunction(async (inputArgs) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "replaceExtension",
        args: [inputArgs.extension],
        parse: async (receipt) => {
          const events = this.contractWrapper.parseLogs("ExtensionReplaced", receipt.logs);
          if (events.length < 1) {
            throw new Error("No ExtensionReplaced event found");
          }
          const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;
          const contractAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);
          const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);
          const updatedAbi = joinABIs([contractAbi, abiToAdd]);
          this.contractWrapper.updateAbi(updatedAbi);
          return receipt;
        }
      });
    }));
    __publicField(this, "replaceDeployed", buildTransactionFunction(async (inputArgs) => {
      let extensionAbi = inputArgs.extensionAbi;
      if (!extensionAbi) {
        const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);
        extensionAbi = metadata.abi;
      }
      invariant(extensionAbi, "Require extension ABI");
      let extensionMetadataUri = "";
      if (inputArgs.extensionMetadata) {
        if (typeof inputArgs.extensionMetadata === "string") {
          extensionMetadataUri = inputArgs.extensionMetadata;
        } else {
          const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);
          extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);
        }
      }
      const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));
      const extension = {
        metadata: {
          name: inputArgs.extensionName,
          metadataURI: extensionMetadataUri,
          implementation: inputArgs.extensionAddress
        },
        functions: extensionFunctions
      };
      return this.replace.prepare({
        extension,
        extensionAbi
      });
    }));
    __publicField(this, "replacePublished", buildTransactionFunction(async (inputArgs) => {
      const version = inputArgs.version || "latest";
      const {
        deployedExtensionAddress,
        extensionMetadata
      } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);
      return this.replaceDeployed.prepare({
        extensionName: inputArgs.extensionName,
        extensionAddress: deployedExtensionAddress,
        extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata
      });
    }));
    __publicField(this, "remove", buildTransactionFunction(async (inputArgs) => {
      const extensionAddress = await this.getExtensionAddress(inputArgs.extensionName);
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "removeExtension",
        args: [inputArgs.extensionName],
        parse: async (receipt) => {
          const events = this.contractWrapper.parseLogs("ExtensionRemoved", receipt.logs);
          if (events.length < 1) {
            throw new Error("No ExtensionRemoved event found");
          }
          const extensionAbi = (await fetchContractMetadataFromAddress(extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;
          const updatedAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);
          this.contractWrapper.updateAbi(updatedAbi);
          return receipt;
        }
      });
    }));
    this.contractWrapper = contractWrapper;
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async getAll() {
    const extensions = await this.contractWrapper.readContract.getAllExtensions();
    return extensions;
  }
  async get(extensionName) {
    const extension = await this.contractWrapper.readContract.getExtension(extensionName);
    return extension;
  }
  async getExtensionAddress(extensionName) {
    const extension = await this.get(extensionName);
    return extension.metadata.implementation;
  }
  async getAllFunctions(extensionName) {
    const extension = await this.get(extensionName);
    return extension.functions;
  }
  async getExtensionForFunction(functionInput) {
    let selector = functionInput.functionSelector;
    if (!selector) {
      invariant(functionInput.functionSignature, "Atleast one of function selector and signature must be provided");
      selector = utils_exports.id(functionInput.functionSignature).substring(0, 10);
    }
    const extensionMetadata = await this.contractWrapper.readContract.getMetadataForFunction(selector);
    return extensionMetadata;
  }
  async getExtensionAddressForFunction(functionInput) {
    const extensionMetadata = await this.getExtensionForFunction(functionInput);
    return extensionMetadata.implementation;
  }
  filterAbiForAdd(extensionAbi, extension) {
    const extensionAbiInterface = new utils_exports.Interface(extensionAbi);
    const extensionFunctionSelectors = extension.functions.map((fn) => fn.functionSelector);
    const filtered = extensionAbi.filter((item) => {
      const fnFragment = Object.values(new utils_exports.Interface([item]).functions);
      if (fnFragment.length === 0) {
        return false;
      }
      const fnSigHash = extensionAbiInterface.getSighash(fnFragment[0]);
      return extensionFunctionSelectors.includes(fnSigHash);
    });
    return filtered;
  }
  filterAbiForRemove(fullAbi, abiToRemove) {
    const fullAbiInterface = new utils_exports.Interface(fullAbi);
    const interfaceToRemove = new utils_exports.Interface(abiToRemove);
    const functionsToRemove = Object.values(interfaceToRemove.functions).map((fn) => interfaceToRemove.getSighash(fn));
    const filtered = fullAbi.filter((item) => {
      const fnFragment = Object.values(new utils_exports.Interface([item]).functions);
      if (fnFragment.length === 0) {
        return false;
      }
      const fnSigHash = fullAbiInterface.getSighash(fnFragment[0]);
      return !functionsToRemove.includes(fnSigHash);
    });
    return filtered;
  }
  async deployExtension(extensionName, publisherAddress) {
    var _a;
    let version = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "latest";
    const published = await fetchPublishedContractFromPolygon(publisherAddress, extensionName, version, this.contractWrapper.storage, this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);
    const deploymentInfo = await getDeploymentInfo(published.metadataUri, this.contractWrapper.storage, this.contractWrapper.getProvider(), "", this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);
    const implementationAddress = (_a = deploymentInfo.find((i) => i.type === "implementation")) == null ? void 0 : _a.transaction.predictedAddress;
    const transactionsToSend = deploymentInfo.filter((i) => i.transaction.data && i.transaction.data.length > 0);
    const transactionsforDirectDeploy = transactionsToSend.filter((i) => {
      return i.type !== "infra";
    }).map((i) => i.transaction);
    const transactionsForThrowawayDeployer = transactionsToSend.filter((i) => {
      return i.type === "infra";
    }).map((i) => i.transaction);
    const signer = this.contractWrapper.getSigner();
    invariant(signer, "Signer is required");
    await deployWithThrowawayDeployer(signer, transactionsForThrowawayDeployer, {});
    for (const tx of transactionsforDirectDeploy) {
      try {
        await deployContractDeterministic(signer, tx);
      } catch (e) {
        console.debug(`Error deploying contract at ${tx.predictedAddress}`, e == null ? void 0 : e.message);
      }
    }
    return {
      deployedExtensionAddress: implementationAddress,
      extensionMetadata: published.metadataUri
    };
  }
};
var SmartContract = class {
  get abi() {
    return AbiSchema.parse(this.contractWrapper.abi || []);
  }
  get royalties() {
    return assertEnabled(this.detectRoyalties(), FEATURE_ROYALTY);
  }
  get roles() {
    return assertEnabled(this.detectRoles(), FEATURE_PERMISSIONS);
  }
  get sales() {
    return assertEnabled(this.detectPrimarySales(), FEATURE_PRIMARY_SALE);
  }
  get platformFees() {
    return assertEnabled(this.detectPlatformFees(), FEATURE_PLATFORM_FEE);
  }
  get owner() {
    return assertEnabled(this.detectOwnable(), FEATURE_OWNER);
  }
  get erc20() {
    return assertEnabled(this.detectErc20(), FEATURE_TOKEN);
  }
  get erc721() {
    return assertEnabled(this.detectErc721(), FEATURE_NFT);
  }
  get erc1155() {
    return assertEnabled(this.detectErc1155(), FEATURE_EDITION);
  }
  get app() {
    return assertEnabled(this.detectApp(), FEATURE_APPURI);
  }
  get directListings() {
    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);
  }
  get englishAuctions() {
    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);
  }
  get offers() {
    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);
  }
  get airdrop20() {
    return assertEnabled(this.detectAirdrop20(), FEATURE_AIRDROP_ERC20);
  }
  get airdrop721() {
    return assertEnabled(this.detectAirdrop721(), FEATURE_AIRDROP_ERC721);
  }
  get airdrop1155() {
    return assertEnabled(this.detectAirdrop1155(), FEATURE_AIRDROP_ERC1155);
  }
  get accountFactory() {
    return assertEnabled(this.detectAccountFactory(), FEATURE_ACCOUNT_FACTORY);
  }
  get account() {
    return assertEnabled(this.detectAccount(), FEATURE_ACCOUNT);
  }
  get extensions() {
    return assertEnabled(this.detectBaseRouter(), FEATURE_DYNAMIC_CONTRACT);
  }
  get chainId() {
    return this._chainId;
  }
  constructor(network, address, abi, storage) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    this._chainId = chainId;
    this.storage = storage;
    this.contractWrapper = contractWrapper;
    this.events = new ContractEvents(this.contractWrapper);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.publishedMetadata = new ContractPublishedMetadata(this.contractWrapper, this.storage);
    this.metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.address;
  }
  prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
  detectRoyalties() {
    if (detectContractFeature(this.contractWrapper, "Royalty")) {
      const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);
      return new ContractRoyalty(this.contractWrapper, metadata);
    }
    return void 0;
  }
  detectRoles() {
    if (detectContractFeature(this.contractWrapper, "Permissions")) {
      return new ContractRoles(this.contractWrapper, ALL_ROLES);
    }
    return void 0;
  }
  detectPrimarySales() {
    if (detectContractFeature(this.contractWrapper, "PrimarySale")) {
      return new ContractPrimarySale(this.contractWrapper);
    }
    return void 0;
  }
  detectPlatformFees() {
    if (detectContractFeature(this.contractWrapper, "PlatformFee")) {
      return new ContractPlatformFee(this.contractWrapper);
    }
    return void 0;
  }
  detectErc20() {
    if (detectContractFeature(this.contractWrapper, "ERC20")) {
      return new Erc20(this.contractWrapper, this.storage, this.chainId);
    }
    return void 0;
  }
  detectErc721() {
    if (detectContractFeature(this.contractWrapper, "ERC721")) {
      return new Erc721(this.contractWrapper, this.storage, this.chainId);
    }
    return void 0;
  }
  detectErc1155() {
    if (detectContractFeature(this.contractWrapper, "ERC1155")) {
      return new Erc1155(this.contractWrapper, this.storage, this.chainId);
    }
    return void 0;
  }
  detectOwnable() {
    if (detectContractFeature(this.contractWrapper, "Ownable")) {
      return new ContractOwner(this.contractWrapper);
    }
    return void 0;
  }
  detectApp() {
    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);
    if (detectContractFeature(this.contractWrapper, "AppURI")) {
      return new ContractAppURI(this.contractWrapper, metadata, this.storage);
    } else if (detectContractFeature(this.contractWrapper, "ContractMetadata")) {
      return new ContractAppURI(this.contractWrapper, metadata, this.storage);
    }
    return void 0;
  }
  detectDirectListings() {
    if (detectContractFeature(this.contractWrapper, "DirectListings")) {
      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);
    }
    return void 0;
  }
  detectEnglishAuctions() {
    if (detectContractFeature(this.contractWrapper, "EnglishAuctions")) {
      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);
    }
    return void 0;
  }
  detectOffers() {
    if (detectContractFeature(this.contractWrapper, "Offers")) {
      return new MarketplaceV3Offers(this.contractWrapper, this.storage);
    }
    return void 0;
  }
  detectBaseRouter() {
    if (detectContractFeature(this.contractWrapper, FEATURE_DYNAMIC_CONTRACT.name)) {
      return new ExtensionManager(this.contractWrapper);
    }
    return void 0;
  }
  detectAirdrop20() {
    if (detectContractFeature(this.contractWrapper, "AirdropERC20")) {
      return new Airdrop20(this.contractWrapper);
    }
    return void 0;
  }
  detectAirdrop721() {
    if (detectContractFeature(this.contractWrapper, "AirdropERC721")) {
      return new Airdrop721(this.contractWrapper);
    }
    return void 0;
  }
  detectAirdrop1155() {
    if (detectContractFeature(this.contractWrapper, "AirdropERC1155")) {
      return new Airdrop1155(this.contractWrapper);
    }
    return void 0;
  }
  detectAccountFactory() {
    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT_FACTORY.name)) {
      return new AccountFactory(this.contractWrapper);
    }
    return void 0;
  }
  detectAccount() {
    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT.name)) {
      return new Account(this.contractWrapper);
    }
    return void 0;
  }
};
export {
  SmartContract
};
//# sourceMappingURL=smart-contract-1e6b441e.browser.esm-3GQ4VFP5.js.map
